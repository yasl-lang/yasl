# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- v0.*

pr:
- master
- v0.*

jobs:
- job:
  displayName: "C MinGW Windows"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      set -e
      cmake  -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      tests.exe
    displayName: "Run API Tests"
- job:
  displayName: "C MSVC Windows"
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script:
      cmake -G "Visual Studio 15" .
    displayName: "Generate Solution"  
  - task: MSBuild@1
    inputs:
      solution: yasl.sln
    displayName: "Compile"
  - script:
      Debug\tests.exe
    displayName: "Run API Tests"
- job: 
  displayName: "C TCC Ubuntu"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      set -e
      curl -o tcc.tar.bz2 http://download-mirror.savannah.gnu.org/releases/tinycc/tcc-0.9.27.tar.bz2
      tar xjf tcc.tar.bz2
      cd tcc-0.9.27/
      ./configure
      make
      sudo make install
    displayName: "Install TCC"
  - script: |
      set -e
      cmake -DCMAKE_C_COMPILER=tcc .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      ./tests.sh
    displayName: "Run Interpreter Tests"
- job: 
  displayName: "C GCC Ubuntu"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      set -e
      cmake .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      ./tests.sh
    displayName: "Run Interpreter Tests"
- job: 
  displayName: "C Clang Ubuntu"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      set -e
      export CC=clang
      export CXX=clang++
      cmake .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      ./tests.sh
    displayName: "Run Interpreter Tests"
- job:
  displayName: "C Clang Ubuntu [Debug]"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"
  - script: |
      set -e
      export CC=clang
      export CXX=clang++
      cmake . -DDEBUG=ON
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      ./tests.sh
    displayName: "Run Interpreter Tests"
- job: 
  displayName: "C++ GCC Ubuntu"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      set -e
      cmake -Dcpp=true
      cmake .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      ./tests.sh
    displayName: "Run Interpreter Tests"
- job: 
  displayName: "C++ Clang Ubuntu"
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script:
      sudo apt install valgrind
    displayName: "Install Valgrind"  
  - script: |
      set -e
      export CC=clang
      export CXX=clang++
      cmake -Dcpp=true
      cmake .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      ./tests.sh
    displayName: "Run Interpreter Tests"
- job: 
  displayName: "C Clang MacOS"
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: |
      set -e
      export CC=clang
      export CXX=clang++
      cmake .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      zsh ./tests.sh -m
    displayName: "Run Interpreter Tests"
- job: 
  displayName: "C++ Clang MacOS"
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: |
      set -e
      export CC=clang
      export CXX=clang++
      cmake -Dcpp=true
      cmake .
      make yasl
      make yaslapi
      make tests
    displayName: "Compile"
  - script:
      ./tests
    displayName: "Run API Tests"
  - script:
      zsh ./tests.sh -m
    displayName: "Run Interpreter Tests"
